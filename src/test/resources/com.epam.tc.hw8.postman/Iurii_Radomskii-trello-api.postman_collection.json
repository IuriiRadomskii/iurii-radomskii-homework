{
	"info": {
		"_postman_id": "c04984d8-0ec7-41e8-b65f-857cd7bf7c70",
		"name": "Iurii_Radomskii-trello-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create board",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.clear();\r",
							"pm.collectionVariables.set(\"baseURI\", \"https://api.trello.com\");\r",
							"pm.collectionVariables.set(\"apiKey\", \"8dc9288d8e83db8708a3f400f01710a4\");\r",
							"pm.collectionVariables.set(\"apiToken\", \"7f6ea3aa3c35746b9192a95b4d491e973968179de720d15744b6a2d65f74be85\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Assert status\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response content type\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response format\", () => {\r",
							"    pm.response.to.be.success;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response encoding\", () => {\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\");\r",
							"});\r",
							"\r",
							"pm.test(\"Assert that json have name\", () => {\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"boardID\", pm.response.json().id);\r",
							"pm.collectionVariables.set(\"initialBoardName\", pm.response.json().name);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURI}}/1/boards/?name={{$randomFirstName}}&key={{apiKey}}&token={{apiToken}}&defaultLists=false",
					"host": [
						"{{baseURI}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{$randomFirstName}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "defaultLists",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update board",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let newBoardName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.collectionVariables.set(\"newBoardName\", newBoardName);\r",
							"\r",
							"pm.collectionVariables.set(\"newBoardColor\", \"lime\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Assert status\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response content type\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response format\", () => {\r",
							"    pm.response.to.be.success;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response encoding\", () => {\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURI}}/1/boards/{{boardID}}?name={{newBoardName}}&key={{apiKey}}&token={{apiToken}}&prefs/background=lime&defaultLists=false",
					"host": [
						"{{baseURI}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "name",
							"value": "{{newBoardName}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "prefs/background",
							"value": "lime"
						},
						{
							"key": "defaultLists",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check updated board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Assert status\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response content type\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response format\", () => {\r",
							"    pm.response.to.be.success;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response encoding\", () => {\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\");\r",
							"});\r",
							"\r",
							"pm.test(\"Assert new board color\", () => {\r",
							"    pm.expect(pm.response.json().prefs.background).to.eql(pm.collectionVariables.get(\"newBoardColor\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Assert new board name\", () => {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.collectionVariables.get(\"newBoardName\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURI}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURI}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Assert status\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response content type\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response format\", () => {\r",
							"    pm.response.to.be.success;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response encoding\", () => {\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\");\r",
							"});\r",
							"\r",
							"pm.test(\"Assert json field '_value'\", () => {\r",
							"    pm.response.to.have.jsonBody(\"_value\");\r",
							"});\r",
							"\r",
							"pm.test(\"Assert json field '_value'\", () => {\r",
							"    pm.expect(pm.response.json()._value).to.eql(null);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURI}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURI}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Assert status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert that response is not found\", () => {\r",
							"    pm.response.to.be.notFound;\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response text\", () => {\r",
							"    pm.expect(pm.response.text()).contain(\"The requested resource was not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURI}}/1/boards/:id?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURI}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiKey",
			"value": "8dc9288d8e83db8708a3f400f01710a4"
		},
		{
			"key": "apiToken",
			"value": "04bf89cbd89878986d03d30172238d73899b6e3425ab97d0d486a822eea32365"
		},
		{
			"key": "baseURI",
			"value": ""
		},
		{
			"key": "boardID",
			"value": ""
		},
		{
			"key": "initialBoardName",
			"value": ""
		},
		{
			"key": "newBoardName",
			"value": ""
		},
		{
			"key": "newBoardColor",
			"value": ""
		}
	]
}